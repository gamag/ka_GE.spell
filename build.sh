#!/bin/bash

# This file is part of ka_GE.spell
# Copyright (C) 2016 Gabriel Margiani
#
#  is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
#  is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ka_GE.spell  If not, see <http://www.gnu.org/licenses/>.

cd $(dirname $0)/build

if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
	echo "Creates a hunspell dict using Bumbeishvilis wordlist from mysql.";
	exit
fi

if [[ ! -f ../dbaccess ]]; then
	echo "Create a file called 'dbaccess' containing"
	echo "DBUSER=..."
	echo "DBNAME=..."
	echo "DBPASS=..."
	echo "so I access the database."
	exit 1;
fi

source ../dbaccess

LICENSE="
	# This file was generated by ka_GE.spell script by Gabriel Margiani using words from word lists by:
	# - Dato Bumbeishvili (https://github.com/bumbeishvili/GeoWordsDatabase)
	# - Kevin Scannell (http://crubadan.org/) CC-BY 4.0
"

# Remove lines from $1 that are in $2..n too.
function leftxor() {
	sort -m "$@" | uniq -d >xortmp
	sort -m xortmp "$1" | uniq -u
	rm xortmp
}


echo "pulling database dump from https://github.com/bumbeishvili/GeoWordsDatabase"
if [[ -d GeoWordsDatabase ]]; then
	cd GeoWordsDatabase;
	git pull;
	cd ..
else
	git clone https://github.com/bumbeishvili/GeoWordsDatabase.git GeoWordsDatabase;
fi

REF=$(cd GeoWordsDatabase; git rev-parse HEAD)
touch dbref

if [[ "$(cat dbref)" != "$REF" ]]; then
	echo "Updating database"
	mysql -NL "-u$DBUSER" "-p$DBPASS" "$DBNAME" <GeoWordsDatabase/geowords*.sql
	echo "$REF" >dbref
fi


echo "Reading word list from db"
mysql -NL "-u$DBUSER" "-p$DBPASS" "$DBNAME" -e \
	"SELECT word_geo FROM words ORDER BY word_geo;" | uniq >ka_GE.dbwords

mysql -NL "-u$DBUSER" "-p$DBPASS" "$DBNAME" -e  \
	"SELECT word_geo from words inner join (
				SELECT SUM(repeat_quantity) AS qt, word_id FROM words_history GROUP BY word_id
			)q ON word_id=words.id WHERE qt <= 2 ORDER BY word_geo;" \
	| uniq >ka_GE.dblow


echo "Checking sorting of word lists"
unsorted=""
for f in ka_GE.dbwords ka_GE.dblow ../words/*.txt; do
	sort -c "$f"
	if [[ $? -ne 0 ]]; then
		unsorted="$unsorted, $f"
	fi
done
if [[ -n $unsorted ]]; then
	echo "Error: some word lists appear to be unsorted:"
	echo "$unsorted"
	echo "You may need to set an unicode Locale (if not already set)"
	echo "and sort the word lists in words/*.txt."
	echo "If that doesn't help, make sure mysql is using utf-8 collation."
	exit 1
fi


echo "Merging word lists from './words/'"
sort -m ka_GE.dbwords ../words/*.txt | uniq >ka_GE.words

# we assume a word to be correct if it is in one of the word list in words and in the database.
leftxor ka_GE.dblow ../words/*.txt >ka_GE.low


echo "Preparing word list: removing blacklisted words"
sort ../blacklist >ka_GE.ign
leftxor ka_GE.words ka_GE.ign >ka_GE.tmp2
wc -l <ka_GE.tmp2 >ka_GE.tmp
cat ka_GE.tmp2 >>ka_GE.tmp


echo "Creating affix file"
echo "$LICENSE" >ka_GE.aff
echo "SET UTF-8" >>ka_GE.aff

echo "Create TRY character list:"
TRY=$(mysql -NL "-u$DBUSER" "-p$DBPASS" "$DBNAME" -e "SELECT title FROM statistics WHERE loadKey='GeoCharsCount' ORDER BY quantity DESC;" | tr -d "\n")
echo $TRY;
echo "TRY $TRY" >>ka_GE.aff

echo "Append affix list"
cat ../affixes >>ka_GE.aff


echo "Munch word list"
munch ka_GE.tmp ka_GE.aff | tail -n +2 - > ka_GE.tmp2
sort ka_GE.tmp2 >ka_GE.mun


echo "Remove rare words and words with low confidence level"
leftxor ka_GE.mun ka_GE.low >ka_GE.tmp


echo "Building dictionary"
wc -l <ka_GE.words >ka_GE.dic
echo "$LICENSE" >>ka_GE.dic
cat ka_GE.tmp >>ka_GE.dic


rm ka_GE.tmp ka_GE.tmp2

echo "Done."
